/*! License information can be found at /3rdpartylicenses.txt */
(() => { var e = { 11379: function (e, t) { !function (e) { function t(e) { return null == e } function r(e) { throw Error("Argument " + e + " is empty.") } function n(e) { return "function" == typeof e && "getType" in e } function a(e) { throw Error("Argument " + e + ' is invalid, it should be an action-creator instance from "typesafe-actions"') } function o(e, t) { if (null == e) throw Error("Argument contains array with empty element at index " + t); if (null == e.getType) throw Error("Argument contains array with invalid element at index " + t + ', it should be an action-creator instance from "typesafe-actions"') } function i(e) { return "string" == typeof e || "symbol" == typeof e } function s(e) { throw Error("Argument " + e + " is invalid, it should be an action type of type: string | symbol") } function c(e, t) { if (null == e) throw Error("Argument contains array with empty element at index " + t); if ("string" != typeof e && "symbol" != typeof e) throw Error("Argument contains array with invalid element at index " + t + ", it should be of type: string | symbol") } function E(e, n, o, s) { return t(e) && r(1), i(e) || a(1), { type: e, payload: n, meta: o, error: s } } function l(e, n) { return t(e) && r(1), i(e) || s(1), Object.assign(function () { var t = null != n ? n.apply(void 0, arguments) : void 0; return Object.assign({ type: e }, t) }, { getType: function () { return e }, toString: function () { return e } }) } function _(e, n, a) { return t(e) && r(1), i(e) || s(1), function () { return l(e, function () { var e = arguments.length <= 0 ? void 0 : arguments[0], t = arguments.length <= 1 ? void 0 : arguments[1]; return null == n && null == a || (e = null != n ? n.apply(void 0, arguments) : void 0, t = null != a ? a.apply(void 0, arguments) : void 0), Object.assign({}, void 0 !== e && { payload: e }, {}, void 0 !== t && { meta: t }) }) } } function A(e) { return t(e) && r(1), n(e) || a(1), e.getType() } function d(e, n) { return t(e) && r(1), i(e) || s(1), Object.assign(null != n ? n(e) : function () { return { type: e } }, { getType: function () { return e }, toString: function () { return e } }) } e.action = E, e.createAction = _, e.createAsyncAction = function (e, t, r, n) { return function () { var a = [e, t, r, n].map(function (e, t) { return Array.isArray(e) ? _(e[0], e[1], e[2])() : "string" == typeof e || "symbol" == typeof e ? _(e)() : void (t < 3 && function (e) { throw Error("Argument " + e + ' is invalid, it should be an action type of "string | symbol" or a tuple of "[string | symbol, Function, Function?]"') }(t)) }); return { request: a[0], success: a[1], failure: a[2], cancel: a[3] } } }, e.createCustomAction = l, e.createReducer = function e(t, r) { void 0 === r && (r = {}); var a = Object.assign({}, r), o = function (r, o) { var s = Array.isArray(r) ? r : [r], c = {}; return s.map(function (e, t) { return n(e) ? A(e) : i(e) ? e : function (e) { throw Error("Argument " + e + ' is invalid, it should be an action-creator instance from "typesafe-actions" or action type of type: string | symbol') }(t + 1) }).forEach(function (e) { return c[e] = o }), e(t, Object.assign({}, a, {}, c)) }; return Object.assign(function (e, r) { if (void 0 === e && (e = t), a.hasOwnProperty(r.type)) { var n = a[r.type]; if ("function" != typeof n) throw Error('Reducer under "' + r.type + '" key is not a valid reducer'); return n(e, r) } return e }, { handlers: Object.assign({}, a), handleAction: o, handleType: o }) }, e.deprecated = { createAction: function (e, t) { return Object.assign(null == t ? function () { return E(e) } : t(E.bind(null, e)), { getType: function () { return e }, toString: function () { return e } }) }, createCustomAction: d, createStandardAction: function (e) { return t(e) && r(1), i(e) || s(1), Object.assign(function () { return d(e, function (e) { return function (t, r) { return { type: e, payload: t, meta: r } } }) }, { map: function (t) { return d(e, function (e) { return function (r, n) { return Object.assign(t(r, n), { type: e }) } }) } }) } }, e.getType = A, e.isActionOf = function (e, n) { t(e) && r(1); var a = Array.isArray(e) ? e : [e]; a.forEach(o); var i = function (e) { return a.some(function (t) { return e.type === t.getType() }) }; return void 0 === n ? i : i(n) }, e.isOfType = function (e, n) { t(e) && r(1); var a = Array.isArray(e) ? e : [e]; a.forEach(c); var o = function (e) { return a.includes(e.type) }; return void 0 === n ? o : o(n) } }(t) } }, t = {}; function r(n) { var a = t[n]; if (void 0 !== a) return a.exports; var o = t[n] = { exports: {} }; return e[n].call(o.exports, o, o.exports, r), o.exports } r.g = function () { if ("object" == typeof globalThis) return globalThis; try { return this || Function("return this")() } catch (e) { if ("object" == typeof window) return window } }(), (() => { (u = T || (T = {})).AMBIENT_CUE = "CCADjeeoaD", u.NSR = "aksljdCjAd", u.RECOMMENDATIONS = "knR5Gk8lb", u.SEARCH_BOX = "cwOJ4oLf3", u.SIDEBAR = "jk8lb2RUiD"; let e = { cue: 0x7ffffffb, sidebar: 0x7fffffff }, t = "A3vA1yvIz38JkeyjqpqAE6tEas0E7XLbCIjkbdJKCBXzzhzE12uoAu8qK7f5LamXLhbrCddBudeHwo3IbIZDRAAAAACOeyJvcmlnaW4iOiJodHRwczovL2dsZWFuLmNvbTo0NDMiLCJmZWF0dXJlIjoiRGlzYWJsZVRoaXJkUGFydHlTdG9yYWdlUGFydGl0aW9uaW5nIiwiZXhwaXJ5IjoxNzI1NDA3OTk5LCJpc1N1YmRvbWFpbiI6dHJ1ZSwiaXNUaGlyZFBhcnR5Ijp0cnVlfQ==", n = "A7plsArbO/WMcpnVRqEdoH8gtZLButh3+HYNHMuyqgtevdnhB4wLSldRVtcsEf74AOFUH1oUGlJkqrsBJtvnkwMAAABueyJvcmlnaW4iOiJodHRwczovL2dsZWFuLmNvbTo0NDMiLCJmZWF0dXJlIjoiVHBjZCIsImV4cGlyeSI6MTczNTM0Mzk5OSwiaXNTdWJkb21haW4iOnRydWUsImlzVGhpcmRQYXJ0eSI6dHJ1ZX0="; (h = S || (S = {})).BRAVE = "Brave", h.CHROME = "Chrome", h.EDGE = "Edge", h.FIREFOX = "Firefox", h.OPERA = "Opera", h.SAFARI = "Safari", h.UNKNOWN = "the browser"; var a, o, i, s, c, E, l, _, A, d, u, h, T, S, R, O, p, m, g, N, f, I = "undefined" != typeof window ? window : { screen: {}, navigator: {} }, C = (I.matchMedia || function () { return { matches: !1 } }).bind(I), y = function () { }; I.addEventListener && I.addEventListener("p", y, { get passive() { return !0 } }), I.removeEventListener && I.removeEventListener("p", y, !1); var D = "ontouchstart" in I, b = "TouchEvent" in I, w = D || b && C("(any-pointer: coarse)").matches, P = (I.navigator.maxTouchPoints || 0) > 0 || w, L = I.navigator.userAgent || "", v = C("(pointer: coarse)").matches && /iPad|Macintosh/.test(L) && Math.min(I.screen.width || 0, I.screen.height || 0) >= 768, M = (C("(pointer: coarse)").matches || !C("(pointer: fine)").matches && D) && !/Windows.*Firefox/.test(L), U = C("(any-pointer: fine)").matches || C("(any-hover: hover)").matches || v || !D, B = Number.isNaN || function (e) { return "number" == typeof e && e != e }; function H(e, t) { if (e.length !== t.length) return !1; for (var r, n, a = 0; a < e.length; a++)if (!((r = e[a]) === (n = t[a]) || B(r) && B(n))) return !1; return !0 } function G(e, t) { void 0 === t && (t = H); var r = null; function n() { for (var n = [], a = 0; a < arguments.length; a++)n[a] = arguments[a]; if (r && r.lastThis === this && t(n, r.lastArgs)) return r.lastResult; var o = e.apply(this, n); return r = { lastResult: o, lastArgs: n, lastThis: this }, o } return n.clear = function () { r = null }, n } let F = /^\d+$/, k = e => { let t = e.split("."); if (3 !== t.length || t.find(e => !F.exec(e))) return; let r = t.map(e => parseInt(e)); if (!r.includes(NaN)) return r }, V = (e, t) => { let r = k(e), n = k(t); if (r && n) { for (let e = 0; e < 3; e++) { let t = r[e], a = n[e]; if (t > a) return 1; if (t < a) return -1 } return 0 } }, x = e => { let t = e.match("(^|[^\\d])(\\d{1,16})(?:\\.(\\d{1,16}))?(?:\\.(\\d{1,16}))?(?:$|[^\\d])"); if (null !== t) return `${t[2]}.${t[3] || "0"}.${t[4] || "0"}` }, K = (e, t) => { let r = x(e || ""), n = x(t || ""); if (!r || !n) return !1; let a = V(r, n); return void 0 !== a && a >= 0 }, W = /version\/(\d+(\.?_?\d+)+)/i, Y = /(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i, j = (e, t) => { let r = e.match(t); return r?.[1] }, q = [{ browser: S.UNKNOWN, test: [/googlebot/i] }, { browser: S.OPERA, test: [/opera/i] }, { browser: S.OPERA, test: [/opr\/|opios/i] }, { browser: S.UNKNOWN, test: [/SamsungBrowser|Whale|MZBrowser|focus|swing|coast/i] }, { browser: S.OPERA, test: [/opt\/\d+(?:.?_?\d+)+/i] }, { browser: S.UNKNOWN, test: [/yabrowser|ucbrowser|Maxthon|mxios|epiphany|puffin|sleipnir|k-meleon|micromessenger|qqbrowser|msie|trident/i] }, { browser: S.EDGE, test: [/\sedg\/|edg([ea]|ios)/i] }, { browser: S.UNKNOWN, test: [/vivaldi|seamonkey|sailfish|silk|phantom|slimerjs|blackberry|\bbb\d+/i, /rim\stablet|(web|hpw)[o0]s|bada|tizen|qupzilla/i] }, { browser: S.FIREFOX, test: [/firefox|iceweasel|fxios/i] }, { browser: S.UNKNOWN, test: [/electron|MiuiBrowser|chromium/i] }, { browser: S.CHROME, test: [/chrome|crios|crmo/i] }, { browser: S.UNKNOWN, test: [/GSA/i] }, { browser: S.UNKNOWN, test(e) { let t = !/like android/i.test(e), r = /android/i.test(e); return t && r } }, { browser: S.UNKNOWN, test: [/playstation 4/i] }, { browser: S.SAFARI, test: [/safari|applewebkit/i] }], X = G(e => { let t = q.find(t => "function" == typeof t.test ? t.test(e) : t.test.some(t => t.test(e))); return t ? t.browser : S.UNKNOWN }), Q = G(e => { switch (X(e)) { case S.SAFARI: return j(e, W); case S.CHROME: return j(e, Y); default: return } }), $ = () => { let { brave: e, userAgent: t } = self.navigator; return e ? S.BRAVE : X(t) }, z = () => { let { userAgent: e } = self.navigator; return Q(e) }; (a = R || (R = {})).BACKGROUND_PAGE_CORS_REQUESTS = "BACKGROUND_PAGE_CORS_REQUESTS", a.BOOKMARKS_BAR = "BOOKMARKS_BAR", a.CONDITIONAL_NTP = "CONDITIONAL_NTP", a.DEFAULT_CONTENT_SCRIPT_PERMISSIONS = "DEFAULT_CONTENT_SCRIPT_PERMISSIONS", a.HISTORY = "HISTORY", a.NTP = "NTP", S.FIREFOX, S.SAFARI, S.BRAVE, S.OPERA, S.FIREFOX, S.SAFARI, S.SAFARI, S.SAFARI, S.SAFARI; let J = G(() => "Capacitor" in globalThis), Z = () => navigator.userAgent.toLowerCase().includes("android"); "touchOnly" == (P && (U || !M) ? "hybrid" : P ? "touchOnly" : "mouseOnly") || J(); let ee = () => void 0 !== self.orientation || Z() || J(), et = [S.BRAVE, S.CHROME, S.EDGE, S.FIREFOX, S.OPERA, S.SAFARI]; self.navigator.platform.toLowerCase().includes("mac"); let er = () => document.documentElement.hasAttribute("x-data-aab43oPb"), en = () => document.documentElement.getAttribute("x-data-chqOzN3S"); self.chrome || (self.chrome = {}), !self.chrome.runtime && (() => { if (ee()) return !1; let e = $(); if (e === S.SAFARI) { let e = z(); return !!(e && K(e, "16.0.0")) } return et.includes(e) || !!self.chrome?.runtime })() && (self.chrome.runtime = { sendMessage: function (e, t, r, n) { if ("function" == typeof r && (n = r), !er()) { n && n(null); return } let a = { action: t, responseId: n ? Math.random() : void 0 }; if (a.responseId) { let e = t => { let { data: r, origin: o } = t; o !== location.origin || r.action || r.responseId !== a.responseId || (n && n(r.value), window.removeEventListener("message", e)) }; window.addEventListener("message", e) } window.postMessage(a, location.origin) } }); let ea = () => "undefined" != typeof browser && browser?.runtime ? browser.runtime : "undefined" != typeof chrome && chrome?.runtime ? chrome.runtime : void 0, eo = { [S.CHROME]: { canary: "cmnbeclkcipbhgnaabhogngjebnkkcai", prod: "cfpdompphcacgpjfbonkdokgjhgabpij" }, [S.EDGE]: { canary: "dlmbefkcpnjjpnbfpoknjfpjojpbpghb", prod: "lkhkfgdfpoijiiinpjgcgacdkgjeieak" }, [S.FIREFOX]: { canary: "{cfc0d70f-0a94-4b2f-8dcf-3fbe50e07b9c}", prod: "{315f61e5-f0ce-4d6e-a521-70e8da512405}" }, [S.SAFARI]: { canary: "com.glean.Glean-Canary-for-Safari.Extension (877XN49FUQ)", prod: "com.glean.Glean-for-Safari.Extension (877XN49FUQ)" }, [`${S.CHROME}-secondary`]: { canary: "dmpkmcdplhfglgcmdldlbbmehlcmopec", prod: "damlmhnpfhfndmlepfjpnhmlibocdppg" } }, ei = ["dev.askscio.com", "dev.glean.com", "demo.glean.com", "demo2.glean.com", "demo3.glean.com"], es = (e, t) => { if (!e) return !1; try { let r = new URL(e); return "https:" === r.protocol && t.includes(r.hostname) || t.some(e => r.hostname.endsWith(`.${e}`)) } catch (e) { return !1 } }, ec = e => es(e, ei), eE = ec(self.document?.currentScript?.getAttribute("src")), el = ec(self.location.origin) || eE, e_ = (() => { try { let e = ea(); if (!e?.id) return !1; return !Object.entries(eo).map(e => { let [t, r] = e; return r.prod }).includes(e.id) } catch (e) { return !1 } })(), eA = ["canary.askscio.com", "canary.glean.com"], ed = e => es(e, eA), eu = ed(self.location.origin), eh = ed(self.document?.currentScript?.getAttribute("src")), eT = e_ || eu || eh; self.location.origin, ei.concat(eA, ["app.glean.com"]); let eS = ["info", "warn", "debug", "error", "verbose"], eR = { info: ["info"], warn: ["warn"], error: ["error"], debug: ["debug"], verbose: ["info", "warn", "error", "debug", "verbose"] }, eO = e => eR[e] ?? eR.info; class ep { name; history; dumpVerboseForCurrentFile; constructor(e) { this.name = e, this.history = [], this.dumpVerboseForCurrentFile = !1; let t = ep.loggers.get(e); if (t) return t; return ep.loggers.set(e, this), this } enableVerboseCurrentFileLogsForTests() { return "function" == typeof globalThis.expect && (this.dumpVerboseForCurrentFile = !0), this } _log(e, t) { void 0 === e && (e = "log"), this.addToHistory("info", t), this.shouldPrint("info") && console[e](...t) } info() { for (var e = arguments.length, t = Array(e), r = 0; r < e; r++)t[r] = arguments[r]; this._log("info", t) } groupCollapsed() { for (var e = arguments.length, t = Array(e), r = 0; r < e; r++)t[r] = arguments[r]; this._log("groupCollapsed", t) } groupEnd() { for (var e = arguments.length, t = Array(e), r = 0; r < e; r++)t[r] = arguments[r]; this._log("groupEnd", t) } log() { for (var e = arguments.length, t = Array(e), r = 0; r < e; r++)t[r] = arguments[r]; this._log("log", t) } assert(e, t) { this.addToHistory("info", ["assert", e, t]), this.shouldPrint("info") && console.assert(e, t) } warn() { for (var e = arguments.length, t = Array(e), r = 0; r < e; r++)t[r] = arguments[r]; this.addToHistory("warn", t), this.shouldPrint("warn") && console.warn(`[${this.name}]`, ...t) } debug() { for (var e = arguments.length, t = Array(e), r = 0; r < e; r++)t[r] = arguments[r]; this.addToHistory("debug", t), this.shouldPrint("debug") && console.debug(`[${this.name}]`, ...t) } error() { for (var e = arguments.length, t = Array(e), r = 0; r < e; r++)t[r] = arguments[r]; this.addToHistory("error", t), this.shouldPrint("error") && console.error(`[${this.name}]`, ...t) } verbose() { for (var e = arguments.length, t = Array(e), r = 0; r < e; r++)t[r] = arguments[r]; this.addToHistory("verbose", t), this.shouldPrint("verbose") && console.log(`[${this.name}]`, ...t) } clear() { this.history.length = 0 } dump(e) { let { clear: t, includeNameSpace: r = !1, logLevel: n = "verbose", readableTs: a = !0 } = void 0 === e ? {} : e, o = this.history.filter(e => { let [t, r] = e; return eO(n).includes(r) }); return t && this.clear(), a && (o = o.map(e => { let [t, ...r] = e; return [new Date(t).toISOString(), ...r] })), r ? o.map(e => [this.name, ...e]) : o } dispose() { ep.loggers.delete(this.name) } shouldPrint(e) { return !!this.dumpVerboseForCurrentFile || globalThis.__gleanLogLevel.flatMap(e => eO(e)).includes(e) } addToHistory(e, t) { this.history.push([Date.now(), e, t]), this.history.length > 1e3 && this.history.shift() } static loggers = new Map; static dump(e) { return Array.from(ep.loggers.values()).flatMap(t => t.dump(e)) } } let em = e => eS.includes(e), eg = []; "__gleanLogLevel" in globalThis || Object.defineProperty(globalThis, "__gleanLogLevel", { get: () => Array.from(new Set([...eg, ...(new URLSearchParams(globalThis.location.search).get("logLevel") ?? "")?.split(",").map(e => e.trim())])).filter(em), set(e) { (eg = String(e).split(",").map(e => e.trim()).filter(em)).includes("verbose") && !self.__gleanLogger && (self.__gleanLogger = ep) } }); let eN = new URLSearchParams(globalThis.location.search), ef = eN.has("result_size_override") || eN.has("sc"); globalThis.__gleanLogLevel = ef ? ["verbose"] : eN.get("logLevel")?.split(",") ?? el ? ["verbose"] : []; let eI = new ep("global"), eC = new Set, ey = e => { eC.add(e) }, eD = () => { if (!eC.size) return; let e = Array.from(document.querySelectorAll('meta[http-equiv="origin-trial"]')).map(e => e.getAttribute("content")); for (let t of [...eC].filter(t => !e.includes(t))) { eI.debug("Frame | Adding OT meta"); let e = document.createElement("meta"); e.httpEquiv = "origin-trial", e.content = t, document.head.appendChild(e) } }; var eb = () => Math.random().toString(36).substring(7).split("").join("."); function ew(e, t) { return function (...r) { return t(e.apply(this, r)) } } function eP(e, t) { if ("function" == typeof e) return ew(e, t); if ("object" != typeof e || null === e) throw Error("Minified Redux error #16; visit https://redux.js.org/Errors?code=16 for the full message or use the non-minified dev environment for full errors. "); let r = {}; for (let n in e) { let a = e[n]; "function" == typeof a && (r[n] = ew(a, t)) } return r } eb(), eb(), () => `@@redux/PROBE_UNKNOWN_ACTION${eb()}`; let eL = { openRect: { height: "100%", right: 0, top: 0, width: 540, zIndex: e.sidebar } }; var ev = r(11379); (o = O || (O = {})).ADD_TITLE_OBSERVER = "ADD_TITLE_OBSERVER", o.BLUR_FRAME = "BLUR_FRAME", o.CREATE_FRAME = "ON_FRAME_CREATE", o.DELETE_FRAME = "ON_FRAME_DELETE", o.FOCUS_FRAME = "ON_FRAME_FOCUS", o.FOCUS_NATIVE_SEARCH_BOX = "ON_FOCUS_NATIVE_SEARCH_BOX", o.GET_EMBEDDED_SEARCH_OPTIONS = "GET_EMBEDDED_SEARCH_OPTIONS", o.GET_PERFORMANCE_EVENT_TIMING = "GET_PERFORMANCE_EVENT_TIMING", o.NAVIGATE_PARENT_FRAME = "ON_NAVIGATE_PARENT_FRAME", o.NAVIGATE_TO_URL = "NAVIGATE_TO_URL", o.NOTIFY_EMBEDDER = "NOTIFY_EMBEDDER", o.ON_AUTH_TOKEN_REQUIRED = "ON_AUTH_TOKEN_REQUIRED", o.ON_BROWSER_ACTION = "ON_BROWSER_ACTION", o.ON_CHAT = "ON_CHAT", o.ON_COPY = "ON_COPY", o.ON_DATASOURCE_CHANGED = "ON_DATASOURCE_CHANGED", o.ON_DRAFT_EXPORT = "ON_DRAFT_EXPORT", o.ON_FRAME_READY = "ON_FRAME_READY", o.ON_SEARCH = "ON_SEARCH", o.ON_TAB_URL_CHANGED = "ON_URL_CHANGED", o.ON_WEB_APP_URL_CHANGED = "ON_WEB_APP_URL_CHANGED", o.OPEN_SIDEBAR = "ON_SIDEBAR_OPEN", o.QUERY_CSS_SELECTORS = "QUERY_CSS_SELECTORS", o.RECOVER_EXTENSION_SW = "RECOVER_EXTENSION_SW", o.RELOAD_EXTENSION_SW = "RELOAD_EXTENSION_SW", o.REQUEST_HOST_PERMISSIONS = "REQUEST_HOST_PERMISSIONS", o.UPDATE_FRAME = "ON_FRAME_UPDATE", (0, ev.createAction)("ADD_TITLE_OBSERVER", e => ({ frameId: e }))(), (0, ev.createAction)("BLUR_FRAME", e => ({ frameId: e }))(), (0, ev.createAction)("ON_FRAME_CREATE", (e, t) => ({ rect: t, src: e }))(), (0, ev.createAction)("ON_FRAME_DELETE", e => ({ frameId: e }))(), (0, ev.createAction)("ON_FRAME_FOCUS", e => ({ frameId: e }))(), (0, ev.createAction)("ON_FOCUS_NATIVE_SEARCH_BOX")(), (0, ev.createAction)("GET_EMBEDDED_SEARCH_OPTIONS", e => ({ frameId: e }))(), (0, ev.createAction)("GET_PERFORMANCE_EVENT_TIMING", e => ({ frameId: e }))(), (0, ev.createAction)("ON_NAVIGATE_PARENT_FRAME", e => ({ url: e }))(), (0, ev.createAction)("NAVIGATE_TO_URL", e => ({ url: e }))(), (0, ev.createAction)("NOTIFY_EMBEDDER", (e, t) => ({ event: t, frameId: e }))(), (0, ev.createAction)("ON_AUTH_TOKEN_REQUIRED")(), (0, ev.createAction)("ON_BROWSER_ACTION")(), (0, ev.createAction)("ON_CHAT", (e, t) => ({ chatId: t, frameId: e }))(), (0, ev.createAction)("ON_COPY", e => ({ text: e }))(), (0, ev.createAction)("ON_DATASOURCE_CHANGED", e => ({ datasource: e }))(), (0, ev.createAction)("ON_DRAFT_EXPORT", e => ({ text: e }))(), (0, ev.createAction)("ON_FRAME_READY")(), (0, ev.createAction)("ON_SEARCH", (e, t) => ({ frameId: e, query: t }))(), (0, ev.createAction)("ON_URL_CHANGED", e => ({ url: e }))(), (0, ev.createAction)("ON_WEB_APP_URL_CHANGED", (e, t) => ({ backend: t, webAppUrl: e }))(), (0, ev.createAction)("ON_SIDEBAR_OPEN", (e, t) => ({ category: t, query: e, source: t }))(), (0, ev.createAction)("QUERY_CSS_SELECTORS", e => ({ selectors: e }))(), (0, ev.createAction)("RECOVER_EXTENSION_SW")(), (0, ev.createAction)("RELOAD_EXTENSION_SW")(), (0, ev.createAction)("REQUEST_HOST_PERMISSIONS", e => ({ origins: e }))(), (0, ev.createAction)("ON_FRAME_UPDATE", (e, t, r) => ({ containerRect: r, frameId: e, rect: t }))(), (i = p || (p = {})).ACTAS = "actas", i.ACTIVE_SECTION = "activeSection", i.ADMIN_APP_TYPE_FILTER = "admin_app_type_filter", i.ADMIN_BACKEND = "local_admin", i.ADMIN_CENTRAL_BACKEND = "local_admin_central", i.ADMIN_CRAWLER_FILTER = "admin_crawling_filter", i.ADMIN_CRAWLING_STATUS_FILTER = "admin_crawling_status_filter", i.ADMIN_SEARCH_ID_TYPE = "admin_search_id_type", i.ADMIN_VISIBILITY_FILTER = "admin_visibility_filter", i.ADVANCED = "advanced", i.AI_APP_TEMPLATE = "aiAppTemplate", i.APPLICATION_ID = "applicationId", i.AUTH = "auth", i.AUTH_ON_NEXT_REQUEST = "authNextRequest", i.BASELINE_EVAL_ID = "baselineEvalId", i.BASE_PATH = "basePath", i.CHAT_AGENT = "chatAgent", i.ACTION_HINTS = "actionHints", i.COLUMNS = "columns", i.COMMUNICATION_CATEGORY = "communication_category", i.DIALOG = "dialog", i.DATASOURCE_INSTANCE = "datasourceInstance", i.DATASOURCE = "datasource", i.DATASOURCE_AUTH_COMPLETE = "dsAuthComplete", i.DATASOURCE_AUTH_NAME = "dsAuthName", i.DATASOURCE_AUTH_STATE = "dsAuthState", i.DATASOURCE_AUTH_URL = "dsAuthUrl", i.DATASOURCES = "ds", i.DEBUG_MODE = "debugMode", i.DEMO_MODE = "demo", i.DIRECTORY_QUERY = "directoryQuery", i.DISABLE_AUTOCORRECT = "disableAutocorrect", i.DISAMBIGUATION_ID = "disambiguationId", i.DOC_DS = "docDs", i.DOC_TITLE = "docTitle", i.DOC_URL = "docUrl", i.DRAFT_ID = "draftId", i.EAGER_QE = "eagerQE", i.EMAIL_HINT = "emailHint", i.EVAL_ID = "evalId", i.EVAL_TYPE = "evalType", i.EXPANDED_SERVICES = "expandedServices", i.EXPANDED_OPERATIONS = "expandedOperations", i.FILTER = "filter", i.FILE_IDS = "fileIds", i.FRAME_ID = "frameId", i.FRAME_TYPE = "frameType", i.FRAME_USE_AUTH_TOKEN = "frameUseAuthToken", i.HEALTH_CHECK_EXECUTED_CHECK_ID = "healthCheckExecutedCheckId", i.HEALTH_CHECK_EXPANDED_CHECK_ID = "healthCheckExpandedCheckId", i.HEALTH_CHECK_EXPANDED_DATASOURCE_INSTANCE = "healthCheckExpandedCheckDsi", i.HEALTH_CHECK_SELECTED_CHECK_IDS = "healthCheckIds", i.HEALTH_CHECK_SELECTED_STATUSES = "healthCheckStatuses", i.HEALTH_CHECK_SELECTED_DSIS = "healthCheckDsis", i.INTERNAL_SELF_SERVE_CREATE_FORM = "internal-self-serve-create-form", i.INITIATOR = "initiator", i.IS_EMBEDDED = "embedded", i.LANG = "lang", i.MAGIC_LINK_TOKEN = "magicLinkToken", i.EMAIL_VERIFICATION_TOKEN = "emailVerificationToken", i.MANAGED_PUSH = "managed", i.MESSAGE = "message", i.MODE = "mode", i.OBJECT_ID = "objectId", i.ONBOARDING_CHECKLIST_STEP = "tour", i.PAGE = "page", i.PASTE = "hcp", i.PEOPLE_SOURCE = "peopleSource", i.PERMISSION_STRINGS = "permission_strings", i.PERSON = "person", i.PIPELINE = "pipeline", i.PROMPT_FIELDS = "promptFields", i.PROMPT_GOAL = "promptGoal", i.PROMPT_ID = "promptId", i.STARTER_MESSAGE = "starterMessage", i.PRINCIPAL = "principal", i.PROMO = "promo", i.QUERY = "q", i.QE = "qe", i.QTT = "qtt", i.REDIRECT = "redirect", i.RESULT_SIZE_OVERRIDE = "result_size_override", i.RESULT_TAB_IDS = "rt", i.ROLE = "role", i.SEARCH_CONFIG = "sc", i.SERVICES = "services", i.SETUP_STEP = "setup", i.SOURCE_SESSION_URL = "source_session_url", i.SKIP_TO_SSO = "skip_to_sso", i.SIDEBAR_TAB = "sidebar_tab", i.SHORTCUT_AUTH = "goLinksEnabled", i.SHOW = "show", i.SHOW_DOC_ID = "showDocumentID", i.SHOW_SEARCH_RESULT_ID = "showSearchResultID", i.SORT_OPTION = "sortOption", i.SOURCE = "source", i.SURFACE = "surface", i.STT = "stt", i.TAB = "tab", i.TEST_MULTITENANT_USER = "test_user", i.TOOL = "tool", i.UPDATE_PEOPLE_SETUP = "update_people_setup", i.UTM_SOURCE = "utm_source", i.VALIDATION = "validation", i.SSO_VALIDATION = "sso_validation", i.SSO_VALIDATION_ERROR = "sso_validation_error", i.VALIDATION_ERROR = "error", i.VALIDATION_ERROR_INFO = "error_info", i.VALIDATION_WARNING = "warning", i.WORKSPACE_REDIRECT = "wspace_redir", i.DEBUG_ENDPOINT_USE_CANARY_BACKEND = "useDebugCanary", i.DEBUG_ENDPOINT_USE_LOCAL_BACKEND = "useDebugLocal", i.DEBUG_ENDPOINT_USE_QE_BACKEND = "useQEForDebugEndpoint", i.DISABLE_STRICT_MODE = "disableStrictMode", i.DOC_ID = "docID", i.EXP_IDS = "eids", i.FORCE_WEB_APP_REDIRECT = "forceRedirect", i.INTERNAL_ADMIN_USE_CANARY_BACKEND = "useInternalAdminCanary", i.INTERNAL_ADMIN_USE_QE_BACKEND = "useQEForInternalAdmin", i.STATUS = "status", i.WSETUP_STAGE = "wsetup", i.GLOBAL_ACT_AS = "globalActAs", i.INSTANCE = "instance", i.LOCAL_DEPLOYMENT_VIEWER = "useLocalDeploymentViewer", i.DEPLOYMENT_WIZARD_BACKEND = "deploymentWizardBackend", i.MENU = "menu", i.PLAYBOOK = "playbook", i.INCIDENT_ID = "incidentId", i.CHECK_IDS = "checkIds", i.RELEASE_GROUP = "releaseGroup", i.ROLLOUT_ID = "rolloutId", i.RELEASE_BRANCH = "releaseBranch", i.HC_DEPLOYMENT = "healthCheckDeployment", i.PACK_TEMPLATE = "packTemplate", i.PR_DEPLOYMENT = "pullRequestDeployment", i.PR_OPERATION = "pullRequestOperation", i.PR_RELEASE_VERSION = "pullRequestReleaseVersion", i.PR_PULL_REQUEST = "pullRequestNumber", i.PR_COMMIT = "pullRequestCommit", i.PR_JIRA = "pullRequestJira", i.PR_BUILD_RELEASE_VERSION = "pullRequestBuildReleaseVersion", i.PR_BUILD_PROJECT_ID = "pullRequestBuildProjectId", i.PR_BUILD_RELEASE_BRANCH = "pullRequestBuildReleaseBranch", i.ROLE_ID_TO_REQUEST = "requestRoleId", i.SAFARI_EXTENSION_AUTH_REFRESH = "sfExtensionAuthRefresh", i.SELECTED_CHANGE_REQUEST_ID = "changeRequestId", i.SELECTED_OPERATION_IDS = "operationIds", i.TEAMMATE_QUERY = "teammateQuery", i.TOOL_AUTH_NAME = "toolAuthName", i.TOOL_AUTH_STATE = "toolAuthState", i.TOOL_TEMPLATE = "toolTemplate", i.VERSION = "version", i.BISECT_MODE = "bisect", i.STATE_FOR_ADMIN_OP = "adminOpState", i.USE_DEV_CONFIG_ENDPOINT = "useDevConfigEndpoint", i.USE_CANARY_CONFIG_ENDPOINT = "useCanaryConfigEndpoint", i.CONTENT_CRAWL_LIMIT = "content_crawl_limit", i.CONTENT_CRAWL_SCOPE = "content_crawl_scope", i.CONTENT_CRAWL_TYPE = "content_crawl_type", i.CONTENT_QUEUE_NAME = "content_queue_name", i.IDENTITY_CRAWL_LIMIT = "identity_crawl_limit", i.IDENTITY_CRAWL_SCOPE = "identity_crawl_scope", i.IDENTITY_CRAWL_TYPE = "identity_crawl_type", i.IDENTITY_QUEUE_NAME = "identity_queue_name", i.STREAMING_SCAN_LIMIT = "streaming_scan_limit", i.GENERIC_CRAWL_LIMIT = "generic_crawl_limit", i.GENERIC_CRAWL_SCOPE = "generic_crawl_scope", i.GENERIC_CRAWL_TYPE = "generic_crawl_type", i.SHOW_IDENTITY_CRAWL_INFO = "show_identity_crawl_info", i.SHOW_CONTENT_CRAWL_INFO = "show_content_crawl_info", i.SHOW_IDENTITY_QUEUE_INFO = "show_identity_queue_info", i.SHOW_CONTENT_QUEUE_INFO = "show_content_queue_info", i.SHOW_STREAMING_SCAN_INFO = "show_streaming_scan_info", i.SHOW_DOCUMENT_FRESHNESS_CHART = "show_document_freshness_chart", i.SHOW_IDENTITY_FRESHNESS_CHART = "show_identity_freshness_chart", i.SHOW_DELETION_OBSERVABILITY = "show_deletion_observability", i.SHOW_ACTIVE_DELETION_PAUSES = "show_active_deletion_pauses", i.SHOW_GENERIC_CRAWL_INFO = "show_generic_crawl_info", i.VANILLA_DEMO = "vanilla_demo", i.FINAL_REDIRECT_URL = "final_redirect_url", Object.values(p); let eM = /(https?:\/\/[a-zA-Z0-9@:%._+\-#=(~]{1,256}\.?[a-zA-Z0-9()]{1,6}\b(?:[a-zA-Z0-9@:%._+\-#=(?&/!]|~[a-zA-Z0-9@:%._+\-#=(?&/!])*)/; RegExp(/\b/.source + eM.source + /(?:[*]|~|,|;{2}|\s|'|"|\[|]|$|\)|>)/.source, "gi"), RegExp(/\b/.source + eM.source + /\b/.source, "gi"); let eU = (e, t) => (void 0 === t && (t = self.location), new URLSearchParams(t.search).has(e)), eB = (e, t) => { let r = new URL(t), n = new URLSearchParams(r.search); return Object.entries(e).forEach(e => { let [t, r] = e; return n.set(t, r || "") }), r.search = n.toString(), r }, eH = (e, t) => (void 0 === t && (t = self.location), t.pathname?.includes(e) || !1), eG = e => { if (!e) return !1; try { let t = new URL(e).hostname.split(".").reverse(); if ("com" !== t[0]) return !1; return "glean" === t[1] || "askscio" === t[1] } catch (e) { return !1 } }, eF = e => Array.isArray(e), ek = e => eF(e) ? e : [e], eV = e => null != e, ex = (e, t) => { let r = {}; return e.forEach(e => { r[e] = t(e) }), r }; (s = m || (m = {})).CREATE_BOOKMARK = "CREATE_BOOKMARK", s.DEAUTHENTICATE = "DEAUTHENTICATE", s.END_TAB_COUNTER = "END_TAB_COUNTER", s.GENERATE_GITHUB_PR_DESCRIPTION = "GENERATE_GITHUB_PR_DESCRIPTION", s.GET_AUTH_STATE = "GET_AUTH_STATE", s.GET_BOOKMARKS_BAR = "GET_BOOKMARKS_BAR", s.GET_CONFIG = "GET_CONFIG", s.GET_DATASOURCE_SCHEMAS = "GET_DATASOURCE_SCHEMAS", s.GET_DOCUMENT = "GET_DOCUMENT", s.GET_EXTENSION_METADATA = "GET_EXTENSION_METADATA", s.GET_FAVICONS = "GET_FAVICONS", s.GET_FILTERED_HISTORY = "GET_FILTERED_HISTORY", s.GET_INJECTED_URLS = "GET_INJECTED_URLS", s.GET_LOCAL_SETTINGS = "GET_LOCAL_SETTINGS", s.GET_LOGS = "GET_LOGS", s.GET_OR_REFRESH_FRAME_AUTH = "GET_OR_REFRESH_FRAME_AUTH", s.GET_PERFORMANCE_EVENT_TIMING = "GET_PERFORMANCE_EVENT_TIMING", s.GET_RAW_VISITS = "GET_RAW_VISITS", s.GET_SIDEBAR_PARAMS = "GET_SIDEBAR_PARAMS", s.GET_STORAGE_ITEM = "GET_STORAGE_ITEM", s.GET_TAB_COUNTER = "GET_TAB_COUNTER", s.HAS_PERMISSIONS = "HAS_PERMISSIONS", s.MOVE_BOOKMARK = "MOVE_BOOKMARK", s.ON_INJECT_URLS = "ON_INJECT_URLS", s.ON_LOG_WORKPLACE_APP_QUERY = "ON_WORKPLACE_APP_QUERY", s.ON_SET_AUTHENTICATION = "ON_AUTHENTICATION_CHANGED", s.ON_SET_DATASOURCE_SCHEMAS = "ON_SET_DATASOURCE_SCHEMAS", s.ON_SET_LOCAL_SETTINGS = "ON_SET_LOCAL_SETTINGS", s.ON_SW_RELOAD = "ON_SW_RELOAD", s.OPEN_CHROME_APPS = "OPEN_CHROME_APPS", s.OPEN_IN_EXISTING_TAB = "OPEN_IN_EXISTING_TAB", s.OPEN_NTP = "OPEN_NTP", s.PING = "PING", s.REFRESH_AUTH = "REFRESH_AUTH", s.REMOVE_BOOKMARK = "REMOVE_BOOKMARK", s.REMOVE_STORAGE_ITEM = "REMOVE_STORAGE_ITEM", s.REQUEST_PERMISSIONS = "REQUEST_PERMISSIONS", s.REQUEST_UPDATE_CHECK = "REQUEST_UPDATE_CHECK", s.SEND_ACTIVITY = "SEND_ACTIVITY", s.SET_AUTH_TOKEN = "SET_AUTH_TOKEN", s.SET_HEALTH_CHECK_CONFIG = "SET_HEALTH_CHECK_CONFIG", s.SET_KEEP_ALIVE_CONFIG = "SET_KEEP_ALIVE_CONFIG", s.SET_NTP_BACKGROUND_STYLE = "SET_NTP_BACKGROUND_STYLE", s.SET_SIDEBAR_PARAMS = "SET_SIDEBAR_PARAMS", s.SET_STORAGE_ITEM = "SET_STORAGE_ITEM", s.START_TAB_COUNTER = "START_TAB_COUNTER", s.UPDATE_BOOKMARK = "UPDATE_BOOKMARK"; let eK = { createBookmark: (0, ev.createAction)("CREATE_BOOKMARK", e => ({ bookmark: e }))(), generateGithubPRDescription: (0, ev.createAction)("GENERATE_GITHUB_PR_DESCRIPTION", e => e)(), getAuthState: (0, ev.createAction)("GET_AUTH_STATE")(), getBookmarksBar: (0, ev.createAction)("GET_BOOKMARKS_BAR", e => { let { excludeIcons: t } = e; return { excludeIcons: t } })(), getConfig: (0, ev.createAction)("GET_CONFIG")(), getDatasourceSchemas: (0, ev.createAction)("GET_DATASOURCE_SCHEMAS")(), getDocument: (0, ev.createAction)("GET_DOCUMENT", e => ({ docUrl: e }))(), getExtensionMetadata: (0, ev.createAction)("GET_EXTENSION_METADATA")(), getFavicons: (0, ev.createAction)("GET_FAVICONS", (e, t) => (void 0 === t && (t = 32), { size: t, urls: e }))(), getFilteredHistory: (0, ev.createAction)("GET_FILTERED_HISTORY", e => ({ params: e }))(), getInjectedUrls: (0, ev.createAction)("GET_INJECTED_URLS")(), getLocalSettings: (0, ev.createAction)("GET_LOCAL_SETTINGS", e => ({ keys: e }))(), getLogs: (0, ev.createAction)("GET_LOGS", e => ({ ...e }))(), getOrRefreshFrameAuth: (0, ev.createAction)("GET_OR_REFRESH_FRAME_AUTH")(), getPerformanceEventTiming: (0, ev.createAction)("GET_PERFORMANCE_EVENT_TIMING")(), getRawVisits: (0, ev.createAction)("GET_RAW_VISITS", e => ({ params: e }))(), getSidebarParams: (0, ev.createAction)("GET_SIDEBAR_PARAMS")(), getStorageItem: (0, ev.createAction)("GET_STORAGE_ITEM", e => ({ key: e }))(), getTabCounter: (0, ev.createAction)("GET_TAB_COUNTER")(), hasPermissions: (0, ev.createAction)("HAS_PERMISSIONS", e => ({ permissions: e }))(), moveBookmark: (0, ev.createAction)("MOVE_BOOKMARK", (e, t, r) => ({ bookmarkId: e, destinationIndex: r, destinationParent: t }))(), openInExistingTab: (0, ev.createAction)("OPEN_IN_EXISTING_TAB", (e, t) => ({ datasource: e, url: t }))(), refreshAuth: (0, ev.createAction)("REFRESH_AUTH")(), removeBookmark: (0, ev.createAction)("REMOVE_BOOKMARK", e => ({ bookmarkId: e }))(), requestPermissions: (0, ev.createAction)("REQUEST_PERMISSIONS", e => ({ permissions: e }))(), requestUpdateCheck: (0, ev.createAction)("REQUEST_UPDATE_CHECK")(), sendActivity: (0, ev.createAction)("SEND_ACTIVITY")(), updateBookmark: (0, ev.createAction)("UPDATE_BOOKMARK", (e, t, r) => ({ bookmarkId: e, newTitle: t, newUrl: r }))() }, eW = { deauthenticate: (0, ev.createAction)("DEAUTHENTICATE")(), endTabCounter: (0, ev.createAction)("END_TAB_COUNTER")(), injectUrls: (0, ev.createAction)("ON_INJECT_URLS", e => ({ urls: e }))(), logWorkplaceAppQuery: (0, ev.createAction)("ON_WORKPLACE_APP_QUERY", e => { let { datasource: t, query: r, url: n } = e; return { datasource: t, query: r, url: n } })(), onSWReload: (0, ev.createAction)("ON_SW_RELOAD", e => e)(), openChromeApps: (0, ev.createAction)("OPEN_CHROME_APPS")(), openNtp: (0, ev.createAction)("OPEN_NTP")(), ping: (0, ev.createAction)("PING")(), removeStorageItem: (0, ev.createAction)("REMOVE_STORAGE_ITEM", e => ({ key: e }))(), setAuthToken: (0, ev.createAction)("SET_AUTH_TOKEN", (e, t) => ({ responseCode: t, token: e }))(), setAuthentication: (0, ev.createAction)("ON_AUTHENTICATION_CHANGED", e => { let { basePath: t, canDeleteFrames: r, configFetchEnabled: n, email: a, enableOverlays: o, isAuthenticated: i, shortcutsConfig: s, webAppUrl: c } = e; return { basePath: t, canDeleteFrames: r, configFetchEnabled: n, email: a, enableOverlays: o, isAuthenticated: i, shortcutsConfig: s, webAppUrl: c } })(), setDatasourceSchemas: (0, ev.createAction)("ON_SET_DATASOURCE_SCHEMAS", e => ({ schemas: e }))(), setHealthCheckConfig: (0, ev.createAction)("SET_HEALTH_CHECK_CONFIG", e => ({ config: e }))(), setKeepAliveConfig: (0, ev.createAction)("SET_KEEP_ALIVE_CONFIG", e => ({ config: e }))(), setLocalSettings: (0, ev.createAction)("ON_SET_LOCAL_SETTINGS", e => ({ settings: e }))(), setNtpBackgroundStyle: (0, ev.createAction)("SET_NTP_BACKGROUND_STYLE", e => ({ style: e }))(), setSidebarParams: (0, ev.createAction)("SET_SIDEBAR_PARAMS", e => ({ params: e }))(), setStorageItem: (0, ev.createAction)("SET_STORAGE_ITEM", (e, t, r) => ({ key: e, timestamp: r, value: t }))(), startTabCounter: (0, ev.createAction)("START_TAB_COUNTER")() }, { dispatch: eY, dispatchAndGetResponse: ej } = (c = e => { void 0 === e && (e = { canary: eT, local: !1 }); let t = $(), r = e.canary ? eo[S.CHROME].canary : eo[S.CHROME].prod; switch (t) { case S.EDGE: return en() || [e.canary ? eo[t].canary : eo[t].prod, r]; case S.FIREFOX: case S.SAFARI: return e.canary ? eo[t]?.canary : eo[t]?.prod; default: return r } }, E = "ExtensionBackground", void 0 === (l = () => $() !== S.SAFARI || er() || eU(p.SAFARI_EXTENSION_AUTH_REFRESH)) && (l = () => !0), { dispatch: e => { let t = ea(); if (!t || !l()) return e; eI.debug(E, "dispatch", e); let r = ek(c()); return (async () => { for (let n of r) try { await new Promise((r, a) => { t?.sendMessage(n, e, {}, () => { t?.lastError ? a(t.lastError) : r(null) }) }); break } catch { } })(), e }, dispatchAndGetResponse: async e => { let t = ea(); if (!t || !l()) return null; for (let r of (eI.debug(E, "dispatch and get response", e), ek(c()))) try { return await new Promise((n, a) => { t?.sendMessage(r, e, {}, e => { t?.lastError ? a(t.lastError) : n(e ?? null) }) }) } catch { } return null } }), eq = { ...eP(eW, eY), createBookmark: e => ej(eK.createBookmark(e)), generateGithubPRDescription: e => ej(eK.generateGithubPRDescription(e)), getAuthState: () => ej(eK.getAuthState()), getBookmarksBar: e => { let { excludeIcons: t } = e; return ej(eK.getBookmarksBar({ excludeIcons: t })) }, getConfig: () => ej(eK.getConfig()), getDatasourceSchemas: () => ej(eK.getDatasourceSchemas()), getDocument: e => ej(eK.getDocument(e)), getExtensionMetadata: () => ej(eK.getExtensionMetadata()), getFavicons: (e, t) => (void 0 === t && (t = 32), ej(eK.getFavicons(e, t))), getFilteredHistory: e => ej(eK.getFilteredHistory(e)), getInjectedUrls: () => ej(eK.getInjectedUrls()), getLocalSettings: e => ej(eK.getLocalSettings(e)), getLogs: e => ej(eK.getLogs(e)), getOrRefreshFrameAuth: () => ej(eK.getOrRefreshFrameAuth()), getPerformanceEventTiming: () => ej(eK.getPerformanceEventTiming()), getRawVisits: e => ej(eK.getRawVisits(e)), getSidebarParams: () => ej(eK.getSidebarParams()), getStorageItem: e => ej(eK.getStorageItem(e)), getTabCounter: () => ej(eK.getTabCounter()), hasPermissions: e => ej(eK.hasPermissions(e)), moveBookmark: (e, t, r) => ej(eK.moveBookmark(e, t, r)), openInExistingTab: (e, t) => ej(eK.openInExistingTab(e, t)), refreshAuth: () => ej(eK.refreshAuth()), removeBookmark: e => ej(eK.removeBookmark(e)), requestPermissions: e => ej(eK.requestPermissions(e)), requestUpdateCheck: () => ej(eK.requestUpdateCheck()), sendActivity: () => ej(eK.sendActivity()), updateBookmark: (e, t, r) => ej(eK.updateBookmark(e, t, r)) }, eX = /[A-Z]/g, eQ = (e, t) => e.charAt(0).toLowerCase() + e.slice(1).replace(eX, e => `${t}${e.toLowerCase()}`), e$ = e => eQ(e, "-"), ez = e => !!(!e || "string" == typeof e && e.startsWith("0px")), eJ = e => ez(e.height) || ez(e.width), eZ = e => "number" == typeof e ? `${e}px` : e; (_ = g || (g = {}))[_.NONE = 0] = "NONE", _[_.SHIFT = 1] = "SHIFT", _[_.ALT = 2] = "ALT", _[_.META = 4] = "META", _[_.CTRL = 8] = "CTRL", _[_.MOD = 16] = "MOD", _[_.URL_BAR = 32] = "URL_BAR"; let e0 = { frame: { analytics: { pathname: "/frame/insights" }, autocomplete: { pathname: "/frame/autocomplete" }, chat: { apps: { pathname: "/frame/chat/apps" }, instance: { pathname: "/frame/chat/:id" }, pathname: "/frame/chat", prompts: { pathname: "/frame/chat/prompts", prompt: { pathname: "/frame/chat/prompts/:promptId" } }, public: { pathname: "/frame/chat/public" }, workflows: { pathname: "/frame/chat/workflows", workflow: { pathname: "/frame/chat/workflows/:workflowId" } } }, composer: { pathname: "/frame/composer" }, extensionSidePanel: { login: { pathname: "/frame/extensionsidepanel/login" }, pathname: "/frame/extensionsidepanel" }, nsr: { chat: { pathname: "/frame/nsr/chat" }, pathname: "/frame/nsr" }, pathname: "/frame", profile: { pathname: "/frame/profile" }, recommendations: { chat: { pathname: "/frame/recommendations/chat" }, pathname: "/frame/recommendations", search: { pathname: "/frame/recommendations/search" } }, refreshExtensionAuth: { pathname: "/frame/refresh-extension-auth" }, results: { pathname: "/frame/results" }, searchbox: { chat: { pathname: "/frame/searchbox/chat" }, pathname: "/frame/searchbox" }, sidePanel: { chat: { pathname: "/frame/sidepanel/chat" }, composer: { pathname: "/frame/sidepanel/composer" }, pathname: "/frame/sidepanel", search: { pathname: "/frame/sidepanel/search" } } }, sidebar: { about: { pathname: "/sidebar/about" }, chat: { pathname: "/sidebar/chat" }, debug: { pathname: "/sidebar/debug" }, login: { pathname: "/sidebar/login" }, pathname: "/sidebar", search: { pathname: "/sidebar/search" } } }; (() => { try { return new URL(r.g.location.href) } catch (e) { } })(); let e1 = e => e.split("").reduce((e, t) => (e << 5) - e + t.charCodeAt(0) | 0, 0), e2 = () => self.performance ? self.performance.timeOrigin + self.performance.now() : Date.now(); (A = N || (N = {})).PAST_1_MONTH = "Past month", A.PAST_3_MONTHS = "Past 3 months", A.PAST_4_WEEKS = "Past 4 weeks", A.PAST_6_MONTHS = "Past 6 months", A.PAST_WEEK = "Past week"; let e3 = new Map, e4 = e => e3.get(e), e6 = (e, t) => { let r = e3.get(e); e3.set(e, { ...r, ...t }) }, e7 = "important", e5 = [], e8 = (e, t) => t?.querySelector(`iframe[src^="${e}"]`), e9 = (e, t) => { let r = t.getRootNode(); null != r && r !== document && tz.set(e, { container: r }) }, te = (e, t, r) => { void 0 !== r ? e.style.setProperty(t, eZ(r), e7) : e.style.removeProperty(t) }, tt = (e, t) => { let { bottom: r, height: n, left: a, right: o, top: i, width: s, zIndex: c } = e; te(t, "left", a), te(t, "right", o), te(t, "top", i), te(t, "bottom", r), te(t, "height", n), te(t, "width", s), te(t, "z-index", c?.toString()) }, tr = (e, t) => { Object.entries(t).forEach(t => { let [r, n] = t; return e.style.setProperty(e$(r), n, e7) }) }, tn = (e, t) => { var r, n, a; if (t) return `${tn(e)}_${t}`; let o = new URL(e); return r = p.FRAME_ID, n = void 0, void 0 === (a = o) && (a = self.location), new URLSearchParams(a.search).get(r) || n || (eU(p.FRAME_TYPE, o) ? T.AMBIENT_CUE : eH("sidebar", o) ? T.SIDEBAR : eH("searchbox", o) ? T.SEARCH_BOX : eH("nsr", o) ? T.NSR : eH("recommendations", o) ? T.RECOMMENDATIONS : `g_${e1(o.pathname).toString(36).substring(2, 10)}`) }, ta = e => { let t = document.getElementById(e), r = tz.get(e)?.container; return !t && r ? r.querySelector(`#${e}`) : t }, to = e => { let { container: t, id: r, style: n, tagName: a } = e, o = document.getElementById(r); if (o && t.contains(o)) return o; let i = document.createElement(a); return i.id = r, n && tr(i, n), t.appendChild(i), i }; function ti(e) { e.style.setProperty("display", "none", e7) } let ts = (e, t) => { void 0 === t && (t = {}); let { container: r, key: n, queryParams: a, style: o } = t, i = tn(e, n); r && e9(i, r), eD(); let s = eB({ ...a, [p.FRAME_ID]: i, [p.DOC_TITLE]: encodeURIComponent(window.document.title), [p.DOC_URL]: window.location.href }, e), c = ta(i); c && c.remove(); let E = document.createElement("iframe"); return tz.set(i), E.id = i, E.style.setProperty("border", "none", e7), E.style.setProperty("outline", "none", e7), E.style.setProperty("background", "transparent", e7), E.style.setProperty("color-scheme", "none", e7), E.style.setProperty("display", "block", e7), E.setAttribute("allow", "clipboard-write"), E.setAttribute("scrolling", "no"), r ? (E.style.setProperty("height", "100%", e7), E.style.setProperty("width", "100%", e7), o && tr(E, o)) : (E.style.setProperty("position", "fixed", e7), ti(E)), E.src = s.toString(), tQ.initFrame(E), E.addEventListener("load", () => tz.trackFrameLoad(i)), e6(i, { frameCreate: e2() }), (r || document.body).appendChild(E), tQ.sender(i).setEmbedderDetails({ sdkVersion: "fe-release-2024-12-17-3adb6f0" }), i }, tc = e => { let { frameId: t, isSidebar: r, rect: n } = e, a = ta(t); a && (eJ(n) ? ti(a) : (tt(n, a), function (e) { e.style.setProperty("display", "block", e7) }(a)), r && a.setAttribute("name", "glean-sidebar")) }, tE = e => { let { frameId: t } = e; return new Promise(e => { window.setTimeout(async () => { let r = ta(t); r && r.remove(), await tz.dispose(t), e() }, 0) }) }, tl = (e, t) => { let { container: r, key: n, removeNonMatchingFrame: a, style: o } = void 0 === t ? {} : t, i = tn(e, n); if (ta(i)) return tQ.sender(i).onFrameUrlChanged(e), i; if (a && r) { let t = e8(new URL(e).origin, r); t && tE({ frameId: t.id }) } return ts(e, { container: r, key: n, style: o }) }, t_ = e => { let { frameId: t } = e, r = ta(t); r?.contentWindow && r.contentWindow.focus() }, tA = e => { let { frameId: t } = e, r = ta(t); r && r.blur() }, td = async (e, t, r) => { let n = { [p.QUERY]: t, [p.UTM_SOURCE]: r }, a = await eq.getSidebarParams(), o = await e(e0.sidebar.pathname, { ...n, ...a }), i = ts(o), s = e => { "Escape" === e.key && tQ.sender(T.SIDEBAR).onCloseSidebar() }; return i && window.addEventListener("keyup", s), tz.set(i, { cleanup: () => { window.removeEventListener("keyup", s) } }), { frameId: i, url: o } }, tu = async (e, t, r) => { let n = ta(T.SIDEBAR), a = n?.src ?? ""; if (n) tQ.sender(T.SIDEBAR).onOpenSidebar(t, r); else { let { frameId: n, url: o } = await td(e, t, r); a = o, n && tc({ frameId: n, isSidebar: !0, rect: eL.openRect }) } return { frameId: T.SIDEBAR, url: a } }, th = () => { for (; e5.length;) { let e = e5.pop(); e?.parentElement?.removeChild(e) } }, tT = t => { let r = document.createElement("div"), n = t.getBoundingClientRect(); r.style.setProperty("position", "fixed"), r.style.setProperty("top", `${n.top}px`), r.style.setProperty("left", `${n.left}px`), r.style.setProperty("width", `${n.width}px`), r.style.setProperty("height", `${n.height}px`), r.style.setProperty("border", "1px solid red"), r.style.setProperty("background", "rgba(120, 0, 0, 0.1)"), r.style.setProperty("z-index", `${e.cue}`), document.body.appendChild(r), e5.push(r) }, tS = e => { th(); let t = document.querySelectorAll(e); eI.debug("Query CSS selectors:", e), eI.debug("Found elements:", t), t.forEach(e => { tT(e) }) }, tR = e => { window.didInitFrameListeners || (window.didInitFrameListeners = !0, tQ.receiver().handleAction(O.UPDATE_FRAME, e => { let { payload: t } = e; return tc(t) }).handleAction(O.CREATE_FRAME, e => { let { payload: t } = e, { rect: r, src: n } = t, a = ts(n); a && r && tc({ frameId: a, rect: r }) }).handleAction(O.DELETE_FRAME, e => { let { payload: t } = e; return tE(t) }).handleAction(O.FOCUS_FRAME, e => { let { payload: t } = e; return t_(t) }).handleAction(O.BLUR_FRAME, e => { let { payload: t } = e; return tA(t) }).handleAction(O.OPEN_SIDEBAR, t => { let { payload: r } = t; return tu(e, r.query, r.category) }).handleAction(O.QUERY_CSS_SELECTORS, e => { let { payload: t } = e; return tS(t.selectors) }).handleAction(O.GET_PERFORMANCE_EVENT_TIMING, e => { let { payload: t } = e, { frameId: r } = t; if (!r) return; let n = e4(r); n && tQ.sender(r).onPerformanceEventTimingResponse({ frameUpsert: n.frameCreate, processingStart: n.processingStart }) })) }, tO = {}, tp = e => { if (!e) return null; try { let t = new URL(e); return `glean_web_app_url_${e1(t.host)}` } catch (e) { } return null }, tm = (e, t) => { let r = tO[e]; r && (r.removeAllHandlers(), delete tO[e]); let n = tQ.receiver(e); if (n.handleAction(O.ON_WEB_APP_URL_CHANGED, e => { let { payload: t } = e; if (tp(t.backend)) { let e = `${tp(t.backend)}=${t.webAppUrl}; samesite=strict; secure;`; document.cookie = e + (t.webAppUrl ? " max-age=2592000" : " max-age=0") } }), !t) { tO[e] = n; return } let { onAuthTokenRequired: a, onChat: o, onCopy: i, onDatasourceChange: s, onDraftExport: c, onSearch: E } = t; a && n.handleAction(O.ON_AUTH_TOKEN_REQUIRED, a), E && n.handleAction(O.ON_SEARCH, e => { let { payload: t } = e; E(t.query) }), o && n.handleAction(O.ON_CHAT, e => { let { payload: t } = e; o(t.chatId) }), s && n.handleAction(O.ON_DATASOURCE_CHANGED, e => { let { payload: t } = e; s(t.datasource) }), c && n.handleAction(O.ON_DRAFT_EXPORT, e => { let { payload: t } = e; c(t.text) }), i && n.handleAction(O.ON_COPY, e => { let { payload: t } = e; i(t.text) }), tO[e] = n }, tg = e => { let t = ta(e); t && (t.focus(), document.activeElement === t && tQ.sender(e).seekAttention()) }; function tN() { for (var e = arguments.length, t = Array(e), r = 0; r < e; r++)t[r] = arguments[r] } let tf = Object.freeze({}), tI = (e, t) => Object.fromEntries(Object.entries(e).filter(t)), tC = e => ({ [p.FRAME_USE_AUTH_TOKEN]: e?.authToken || e?.authMethod === "token" ? "1" : void 0, [p.QE]: e?.backend, logLevel: e?.debug ? "verbose" : void 0 }), ty = e => ({ ...tC(e), [p.DATASOURCES]: e?.datasourcesFilter, [p.QUERY]: e?.query }), tD = () => { let e = "1" === new URL(window.location.href).searchParams.get("gleanShowSearchResultId"); return tI({ [p.SHOW_SEARCH_RESULT_ID]: e || null }, e => { let [, t] = e; return eV(t) }) }, tb = e => { let t = JSON.parse(JSON.stringify(e)); return Object.entries(e).forEach(e => { let [r, n] = e; "function" == typeof n && (t.listenerAvailability ??= {}, t.listenerAvailability[r] = !0) }), t }, tw = (e, t, r) => { let n = e.getAttribute(t); return e.setAttribute(t, r), () => { null != n ? e.setAttribute(t, n) : e.removeAttribute(t) } }, tP = (t, r) => { if (!ta(r)) return; t.blur(), t.parentElement && t.parentElement.click(); let n = { height: window.innerHeight, width: window.innerWidth }, a = t.getBoundingClientRect(); tc({ frameId: r, rect: { height: window.innerHeight, left: 0, top: 0, width: window.innerWidth, zIndex: e.sidebar } }), tQ.sender(r).onSearchBoxActive(n, { height: a.height, left: a.left, top: a.top, width: a.width }) }, tL = e => { e.focus(), e.click() }, tv = new Map, tM = (e, t) => { let r = "function" == typeof e ? e() : e; if (!r) return tN; tv.get(r)?.(), tv.delete(r); let n = tw(r, "autocomplete", "off"), a = () => tP(r, t); return r.addEventListener("focusin", a), tv.set(r, () => { r.removeEventListener("focusin", a), n() }), () => { eI.debug("Modal Search | Discarding search box listeners, and restoring attributes"), tv.get(r)?.(), tv.delete(r), tL(r) } }, tU = ["light", "dark", "auto"], tB = (e, t) => { try { new URL(e) } catch { throw Error(t) } }, tH = e => { if (e.length > 248) throw Error("'organizationId' cannot exceed 248 characters") }, tG = ["medium", "large", "larger"], tF = e => { let { authMethod: t, backend: n, fontSize: a, onAuthTokenRequired: o, organizationId: i, themeVariant: s, urlsToOpenInCurrentTab: c } = e; if ("token" === t) { if (!("authToken" in e)) throw Error('authToken must be provided when using authMethod: "token"'); if (!o) throw Error('onAuthTokenRequired must be provided when using authMethod: "token"') } else if ("sso" === t) { if ("authToken" in e) throw Error('authToken should not be used with authMethod: "sso"'); if (o) throw Error('onAuthTokenRequired should not be used with authMethod: "sso"') } if (a && !tG.includes(a)) throw Error(`Invalid fontSize: '${a}'. Must be one of ${tG.toString()}`); if (n && tB(n, "Invalid backend URL"), s && !tU.includes(s)) throw Error(`Invalid theme variant provided. Please provide one of: ${tU.join(", ")}`); if (c) { if (c.some(e => !e.startsWith("^"))) throw Error("All urlsToOpenInCurrentTab regexes must start with '^'"); if (c.length > 10) throw Error("Cannot use more than 10 entries for urlsToOpenInCurrentTab") } i && tH(i), e.debug && (r.g.__gleanLogLevel = ["verbose"]) }, tk = e => { tF(e) }, tV = e => { tF(e) }, tx = e => { if (e.searchIconUrl) { let t; try { t = new URL(e.searchIconUrl) } catch { throw Error(`invalid searchIconUrl: ${e.searchIconUrl}`) } if (t?.protocol !== "https:" && t?.protocol !== "data:") throw Error(`invalid searchIconUrl protocol: ${t?.protocol}`) } }, tK = e => { tV(e), e.searchBoxCustomizations && tx(e.searchBoxCustomizations) }; (d = f || (f = {})).CLOSE_SIDEBAR = "ON_CLOSE_SIDEBAR", d.LOG_ACTIVITY = "LOG_ACTIVITY", d.LOG_EMBEDDED_SEARCH_EVENT = "LOG_EMBEDDED_SEARCH_EVENT", d.ON_DOCUMENT_TITLE_CHANGED = "ON_DOCUMENT_TITLE_CHANGED", d.ON_DOCUMENT_URL_CHANGED = "ON_DOCUMENT_URL_CHANGED", d.ON_FRAME_URL_CHANGED = "ON_FRAME_URL_CHANGED", d.ON_PERFORMANCE_EVENT_TIMING_RESPONSE = "ON_PERFORMANCE_EVENT_TIMING_RESPONSE", d.ON_RECOVER_EXTENSION_SW_RESPONSE = "ON_RECOVER_EXTENSION_SW_RESPONSE", d.ON_REQUEST_HOST_PERMISSIONS_RESPONSE = "ON_REQUEST_HOST_PERMISSIONS_RESPONSE", d.ON_SEARCH_BOX_ACTIVE = "ON_SEARCH_BOX_ACTIVE", d.ON_SEEK_ATTENTION = "ON_SEEK_ATTENTION", d.OPEN_SIDEBAR = "ON_OPEN_SIDEBAR", d.SET_EMBEDDED_SEARCH_OPTIONS = "SET_EMBEDDED_SEARCH_OPTIONS", d.SET_EMBEDDER_DETAILS = "SET_EMBEDDER_DETAILS", d.SET_SEARCH_BOX_CUSTOMIZATIONS = "SET_SEARCH_BOX_CUSTOMIZATIONS", d.TOGGLE_SIDEBAR = "ON_TOGGLE_SIDEBAR"; let tW = { logActivity: (0, ev.createAction)("LOG_ACTIVITY", e => ({ event: e }))(), logEmbeddedEvent: (0, ev.createAction)("LOG_EMBEDDED_SEARCH_EVENT", e => ({ event: e }))(), onCloseSidebar: (0, ev.createAction)("ON_CLOSE_SIDEBAR")(), onDocumentTitleChanged: (0, ev.createAction)("ON_DOCUMENT_TITLE_CHANGED", e => ({ title: e }))(), onDocumentUrlChanged: (0, ev.createAction)("ON_DOCUMENT_URL_CHANGED", e => ({ url: e }))(), onFrameUrlChanged: (0, ev.createAction)("ON_FRAME_URL_CHANGED", e => ({ url: e }))(), onOpenSidebar: (0, ev.createAction)("ON_OPEN_SIDEBAR", (e, t) => ({ category: t, query: e, source: t }))(), onPerformanceEventTimingResponse: (0, ev.createAction)("ON_PERFORMANCE_EVENT_TIMING_RESPONSE", e => e)(), onRecoverExtensionSWResponse: (0, ev.createAction)("ON_RECOVER_EXTENSION_SW_RESPONSE", e => e)(), onRequestHostPermissionsResponse: (0, ev.createAction)("ON_REQUEST_HOST_PERMISSIONS_RESPONSE", e => e)(), onSearchBoxActive: (0, ev.createAction)("ON_SEARCH_BOX_ACTIVE", (e, t) => ({ cueRect: t, windowSize: e }))(), onToggleSidebar: (0, ev.createAction)("ON_TOGGLE_SIDEBAR", (e, t) => ({ category: t, query: e, source: t }))(), seekAttention: (0, ev.createAction)("ON_SEEK_ATTENTION")(), setEmbeddedOptions: (0, ev.createAction)("SET_EMBEDDED_SEARCH_OPTIONS", (e, t) => ({ info: t, options: tb(e) }))(), setEmbedderDetails: (0, ev.createAction)("SET_EMBEDDER_DETAILS", e => ({ embedder: e }))(), setSearchBoxCustomizations: (0, ev.createAction)("SET_SEARCH_BOX_CUSTOMIZATIONS", e => ({ customizations: e }))() }, tY = "contentScript", tj = "data-frame-action-queue", tq = e => { let t = e?.getAttribute(tj); if (t) { let e = JSON.parse(t); if (Array.isArray(e)) return e } return [] }, tX = (e, t) => { e?.setAttribute(tj, JSON.stringify(t)) }; class tQ { _frameId; static _channels = {}; static _handlers = []; static _transformAction = e => e; _handlerFuncs; static init() { window.contentScriptPort || (window.contentScriptPort = this) } static initFrame(e) { tQ.init(), eI.debug(tY, "initialize frame:", e.src), window.contentScriptPort?._channels[e.id] && delete window.contentScriptPort._channels[e.id], e.addEventListener("load", () => { let t = new MessageChannel; eI.debug(tY, "frame loaded:", e.id); let r = window.contentScriptPort; r && (t.port1.onmessage = n => { n.data.type === O.ON_FRAME_READY ? (tq(e).forEach(e => t.port1.postMessage(tQ._transformAction(e))), tX(e, [])) : r._handlers.forEach(e => e._handleMessage(n.data)) }, e.contentWindow?.postMessage("oib308w3ug0a", "*", [t.port2]), r._channels[e.id] = t) }) } static receiver(e) { tQ.init(); let t = new tQ(e); return window.contentScriptPort?._handlers.push(t), t } static sender(e) { return eP(tW, t => { if (window.contentScriptPort?._channels[e]) eI.debug(tY, "dispatch", t.type), window.contentScriptPort._channels[e].port1.postMessage(tQ._transformAction(t)); else { eI.debug(tY, "enqueue", t.type); let r = ta(e), n = tq(r); tX(r, [...n, t]) } return t }) } static setActionTransformer(e) { tQ._transformAction = e } constructor(e) { this._frameId = e, this._handlerFuncs = {}, this._handleMessage = (e, t, r) => { if (this._frameId && "payload" in e && "frameId" in e.payload && e.payload.frameId !== this._frameId) return; let n = this._handlerFuncs[e.type]; n && (eI.debug(tY, "handle", e.type), n(e, t, r)) }, ea()?.onMessage?.addListener(this._handleMessage) } handleAction(e, t) { return this._handlerFuncs[e] = t, this } removeAllHandlers() { eI.debug(tY, "remove handlers"), this._handlerFuncs = {} } _handleMessage } class t$ { store = new Map; set(e, t) { let r = this.store.get(e); this.store.set(e, { ...r, ...t }) } createPortReceiver(e) { let t = this.store.get(e), r = tQ.receiver(e); return t?.contentScriptPortReceiver?.removeAllHandlers(), this.set(e, { contentScriptPortReceiver: r }), r } trackFrameLoad(e) { let t = this.store.get(e); this.set(e, { loadEventCount: (t?.loadEventCount ?? 0) + 1 }) } get(e) { return this.store.get(e) } getAllFrameIds() { return Array.from(this.store.keys()) } async dispose(e) { let t = this.store.get(e); t && (await t.cleanup?.(), this.store.delete(e)) } } let tz = new t$, tJ = new Map, tZ = e => { tQ.sender(e).logActivity({ action: "VIEW", params: { title: document.title }, source: "EMBEDDED_SEARCH", timestamp: new Date().toISOString(), url: window.location.href }) }, t0 = e => { if (!tJ.has(e)) { tZ(e); let t = () => tZ(e); window.addEventListener("popstate", t), tJ.set(e, t) } }, t1 = (e, t) => { void 0 === e && (e = tf); let { attribution: r, frameId: n, url: a } = t, o = tz.createPortReceiver(n); tQ.sender(n).setEmbeddedOptions(e, { attribution: r }), o.handleAction(O.GET_EMBEDDED_SEARCH_OPTIONS, () => { (tz.get(n)?.loadEventCount ?? 0) > 1 && (tQ.sender(n).setEmbeddedOptions(e, { attribution: r }), a && tQ.sender(n).onFrameUrlChanged(a)) }) }, t2 = () => eU(p.ACTAS) || eU(p.GLOBAL_ACT_AS), t3 = new Map, t4 = e => { if (t2()) return t3.get(e) || null; for (let t of document.cookie.split(";").map(e => e.trim())) { let r = t.split("="); if (r[0] === e) return r[1] } return null }, t6 = e => { if (e) return `gl_${e.replace(/[^a-zA-Z0-9-_.]/g, "")}` }, t7 = (() => { let e = document.currentScript; return e?.src?.includes(".glean.com") ? new URL(e.src).origin : "https://app.glean.com" })(), t5 = e => { let t = tp(e), r = t ? t4(t) : null; return r && eG(r) ? r : null }, t8 = G((e, t) => { let r = e ? new URL(e).origin : t5(t) ?? t7; return (e, t) => { void 0 === e && (e = e0.frame.pathname); let n = new URL(r); if (n.pathname = e, t) { let e = new URLSearchParams; Object.entries(t).forEach(t => { let [r, n] = t; void 0 !== n && (eF(n) ? n.forEach(t => e.append(r, t)) : e.set(r, n)) }), n.search = e.toString() } return n.toString() } }), t9 = "https://domain-be.glean.com/api/v1".replace(/\/+$/, ""); class re { configuration; constructor(e = {}) { this.configuration = e } set config(e) { this.configuration = e } get basePath() { return null != this.configuration.basePath ? this.configuration.basePath : t9 } get fetchApi() { return this.configuration.fetchApi || window.fetch.bind(window) } get middleware() { return this.configuration.middleware || [] } get queryParamsStringify() { return this.configuration.queryParamsStringify || function e(t, r) { return void 0 === r && (r = ""), Object.keys(t).map(n => (function t(r, n, a) { void 0 === a && (a = ""); let o = a + (a.length ? `[${r}]` : r); if (n instanceof Array) { let e = n.map(e => encodeURIComponent(String(e))).join(`&${encodeURIComponent(o)}=`); return `${encodeURIComponent(o)}=${e}` } return n instanceof Set ? t(r, Array.from(n), a) : n instanceof Date ? `${encodeURIComponent(o)}=${encodeURIComponent(n.toISOString())}` : n instanceof Object ? e(n, o) : `${encodeURIComponent(o)}=${encodeURIComponent(String(n))}` })(n, t[n], r)).filter(e => e.length > 0).join("&") } } get username() { return this.configuration.username } get password() { return this.configuration.password } get apiKey() { let e = this.configuration.apiKey; if (e) return "function" == typeof e ? e : () => e } get accessToken() { let e = this.configuration.accessToken; if (e) return "function" == typeof e ? e : async () => e } get headers() { return this.configuration.headers } get credentials() { return this.configuration.credentials } } let rt = new re; class rr { configuration; middleware; constructor(e = rt) { this.configuration = e, this.fetchApi = async (e, t) => { let r = { url: e, init: t }; for (let e of this.middleware) e.pre && (r = await e.pre({ fetch: this.fetchApi, ...r }) || r); let n = await (this.configuration.fetchApi || fetch)(r.url, r.init); for (let e of this.middleware) e.post && (n = await e.post({ fetch: this.fetchApi, url: r.url, init: r.init, response: n.clone() }) || n); return n }, this.middleware = e.middleware } withMiddleware() { for (var e = arguments.length, t = Array(e), r = 0; r < e; r++)t[r] = arguments[r]; let n = this.clone(); return n.middleware = n.middleware.concat(...t), n } withPreMiddleware() { for (var e = arguments.length, t = Array(e), r = 0; r < e; r++)t[r] = arguments[r]; let n = t.map(e => ({ pre: e })); return this.withMiddleware(...n) } withPostMiddleware() { for (var e = arguments.length, t = Array(e), r = 0; r < e; r++)t[r] = arguments[r]; let n = t.map(e => ({ post: e })); return this.withMiddleware(...n) } async request(e, t) { let { url: r, init: n } = await this.createFetchParams(e, t), a = await this.fetchApi(r, n); if (a.status >= 200 && a.status < 300) return a; throw new rn(a, "Response returned an error code") } async createFetchParams(e, t) { var r, n; let a = this.configuration.basePath + e.path; void 0 !== e.query && 0 !== Object.keys(e.query).length && (a += "?" + this.configuration.queryParamsStringify(e.query)); let o = Object.assign({}, this.configuration.headers, e.headers); Object.keys(o).forEach(e => void 0 === o[e] ? delete o[e] : {}); let i = { method: e.method, headers: o, body: e.body, credentials: this.configuration.credentials }, s = { ...i, ...await ("function" == typeof t ? t : async () => t)({ init: i, context: e }) }; return { url: a, init: { ...s, body: (r = s.body, "undefined" != typeof FormData && r instanceof FormData || s.body instanceof URLSearchParams || (n = s.body, "undefined" != typeof Blob && n instanceof Blob)) ? s.body : JSON.stringify(s.body) } } } fetchApi; clone() { let e = new this.constructor(this.configuration); return e.middleware = this.middleware.slice(), e } } class rn extends Error { response; name; constructor(e, t) { super(t), this.response = e, this.name = "ResponseError" } } let ra = { csv: "," }; class ro { raw; transformer; constructor(e, t = e => e) { this.raw = e, this.transformer = t } async value() { return this.transformer(await this.raw.json()) } } class ri extends rr { async checkactasauthRaw(e, t) { let r = {}; void 0 !== e.actas && (r.actas = e.actas); let n = {}; if (void 0 !== e.xScioActas && null !== e.xScioActas && (n["X-Scio-Actas"] = String(e.xScioActas)), void 0 !== e.xGleanAuthType && null !== e.xGleanAuthType && (n["X-Glean-Auth-Type"] = String(e.xGleanAuthType)), void 0 !== e.gleanApiVersion && null !== e.gleanApiVersion && (n["Glean-Api-Version"] = String(e.gleanApiVersion)), this.configuration && this.configuration.accessToken) { let e = this.configuration.accessToken, t = await e("actAsBearerToken", []); t && (n.Authorization = `Bearer ${t}`) } return new ro(await this.request({ path: "/checkactasauth", method: "POST", headers: n, query: r }, t)) } async checkactasauth(e, t) { void 0 === e && (e = {}); let r = await this.checkactasauthRaw(e, t); return await r.value() } async checkauthRaw(e, t) { let r = {}; void 0 !== e.actas && (r.actas = e.actas), void 0 !== e.clientVersion && (r.clientVersion = e.clientVersion), void 0 !== e.domain && (r.domain = e.domain), e.eids && (r.eids = e.eids.join(ra.csv)), void 0 !== e.locale && (r.locale = e.locale); let n = {}; if (void 0 !== e.xScioActas && null !== e.xScioActas && (n["X-Scio-Actas"] = String(e.xScioActas)), void 0 !== e.xGleanAuthType && null !== e.xGleanAuthType && (n["X-Glean-Auth-Type"] = String(e.xGleanAuthType)), void 0 !== e.gleanApiVersion && null !== e.gleanApiVersion && (n["Glean-Api-Version"] = String(e.gleanApiVersion)), this.configuration && this.configuration.accessToken) { let e = this.configuration.accessToken, t = await e("actAsBearerToken", []); t && (n.Authorization = `Bearer ${t}`) } return new ro(await this.request({ path: "/checkauth", method: "POST", headers: n, query: r }, t)) } async checkauth(e, t) { void 0 === e && (e = {}); let r = await this.checkauthRaw(e, t); return await r.value() } async createanonymoustokenRaw(e) { let t = {}; if (this.configuration && this.configuration.accessToken) { let e = this.configuration.accessToken, r = await e("actAsBearerToken", []); r && (t.Authorization = `Bearer ${r}`) } return new ro(await this.request({ path: "/createanonymoustoken", method: "POST", headers: t, query: {} }, e)) } async createanonymoustoken(e) { let t = await this.createanonymoustokenRaw(e); return await t.value() } async createauthtokenRaw(e, t) { let r = {}; if (void 0 !== e.xScioActas && null !== e.xScioActas && (r["X-Scio-Actas"] = String(e.xScioActas)), void 0 !== e.xGleanAuthType && null !== e.xGleanAuthType && (r["X-Glean-Auth-Type"] = String(e.xGleanAuthType)), this.configuration && this.configuration.accessToken) { let e = this.configuration.accessToken, t = await e("actAsBearerToken", []); t && (r.Authorization = `Bearer ${t}`) } return new ro(await this.request({ path: "/createauthtoken", method: "POST", headers: r, query: {} }, t)) } async createauthtoken(e, t) { void 0 === e && (e = {}); let r = await this.createauthtokenRaw(e, t); return await r.value() } } let rs = { credentials: "include", headers: { "Content-Type": "text/plain" } }; "undefined" == typeof window && (rs.fetchApi = self.fetch.bind(self)); let rc = { ...rs, headers: { "Content-Type": "application/json" } }; class rE extends re { constructor(e = {}) { super({ ...rs, ...e }) } } let rl = e => Math.ceil(Date.now() / 1e3) > e.expirationTime - 900, r_ = { getItem(e) { if (self.localStorage) try { let t = self.localStorage.getItem(e); if (!t) return; return JSON.parse(t) } catch (e) { eI.debug("Error retrieving search token") } }, setItem(e, t) { self.localStorage && self.localStorage.setItem(e, JSON.stringify(t)) } }; class rA { backend; get storageKey() { return `gle-search-anonymous-token:${this.backend}` } constructor(e) { this.backend = e, this.getAuthToken = async () => { let e = r_.getItem(this.storageKey); return e && !rl(e) ? e : await this.createAuthToken() }, this.createAuthToken = async () => { let e = new rE({ basePath: new URL(this.backend).toString() + "api/v1", ...rc }), t = await new ri(e).createanonymoustoken(); return r_.setItem(this.storageKey, t), t } } static create(e) { return new rA(e) } getAuthToken; createAuthToken } let rd = e => { void 0 === e && (e = !0); let t = new URL(window.location.href), r = t.searchParams, n = ["gleanChatAgent", "gleanChatMessage", "gleanChatSource"], { gleanChatAgent: a, gleanChatMessage: o, gleanChatSource: i } = ex(n, e => r.get(e) ?? void 0); return e && (n.forEach(e => r.delete(e)), history.replaceState(void 0, "remove-chat-params", t)), { agent: a, initialMessage: o, source: i } }, ru = e => RegExp(`(\\s|^)${e}:("[^"]+"|[^\\s"]+)`, "gi"), rh = (e, t) => { let r; let n = []; if (!t) return n; let a = ru(e); do (r = a.exec(t)) && n.push(r[2]); while (r) return n }, rT = async e => { let t = t8(e?.webAppUrl, e?.backend); tR(t); let { frameId: r, url: n } = await tu((r, n) => t(r, { ...n, ...ty(e), [p.IS_EMBEDDED]: "1", [p.TAB]: e.datasource || rh("app", e.query)[0] }), e.query); tV(e), tm(r, e), e.enableActivityLogging && !e.disableAnalytics && t0(r), t1(e, { attribution: "openSidebar", frameId: r, url: n }) }; class rS { eventListeners = new Map; addEventListener = (e, t) => { this.eventListeners.has(e) || this.eventListeners.set(e, new Set), this.eventListeners.get(e).add(t) }; removeEventListener = (e, t) => { this.eventListeners.get(e)?.delete(t), this.eventListeners.get(e)?.size === 0 && this.eventListeners.delete(e) }; dispatchEvent(e) { this.eventListeners.get(e.name)?.forEach(t => { try { t(e) } catch (t) { eI.error(`Error in event listener for ${e.name}:`, t) } }) } removeAllListeners() { this.eventListeners.clear() } } class rR { eventTarget; port; constructor() { this.eventTarget = new rS, this.port = tQ.receiver(), this.initializePort(this.port, this.eventTarget) } initializePort(e, t) { e.removeAllHandlers(), e.handleAction(O.NOTIFY_EMBEDDER, e => { let { payload: r } = e; return t.dispatchEvent(r.event) }) } dispose() { this.port.removeAllHandlers(), this.eventTarget.removeAllListeners() } } class rO { eventBridges = new Map; getOrCreateEventTarget(e) { let t = this.eventBridges.get(e); if (t) return t.eventTarget; let r = new rR; return this.eventBridges.set(e, r), r.eventTarget } dispose(e) { this.eventBridges.get(e)?.dispose(), this.eventBridges.delete(e) } disposeAll() { for (let e of this.eventBridges.keys()) this.dispose(e) } } let rp = new rO, rm = (e, t) => Object.entries(t).reduce((e, t) => { let [r, n] = t; return !e[r] && n ? { ...e, [r]: n } : e }, e), rg = (e, t) => { let r = t8(t?.webAppUrl, t?.backend); tR(r); let n = r(e0.frame.autocomplete.pathname, { ...ty(t), [p.IS_EMBEDDED]: "1" }), a = tl(n, { container: e, key: t6(t.key), style: { left: "0px", position: "absolute", top: "0px" } }); return tK(t), tm(a, t), t.enableActivityLogging && !t.disableAnalytics && t0(a), t1(t, { attribution: "renderSearchBox", frameId: a, url: n }), { focus() { tg(a) } } }; t && ey(t), n && ey(n); let rN = { attach: (e, t) => { let r = t8(t?.webAppUrl, t?.backend); tR(r); let n = r(e0.frame.searchbox.pathname, { ...ty(t), [p.DOC_DS]: t?.datasource, [p.IS_EMBEDDED]: "1" }), a = tl(n, { key: t6(t?.key) }), o = tM(e, a); return tm(a, t), t && (tK(t), t.query && tP(e, a), t.enableActivityLogging && !t.disableAnalytics && t0(a)), tz.set(a, { cleanup: () => { o(), t?.onDetach?.() } }), t1(t, { attribution: "attach", frameId: a, url: n }), { focus() { tP(e, a) } } }, attachAutocomplete: rg, createAnalyticsClient: e => { let t = t8(e?.webAppUrl, e?.backend); tR(t); let r = t(e0.frame.analytics.pathname, { ...tC(e), [p.IS_EMBEDDED]: "1" }), n = tl(r, { style: { display: "none" } }); return tm(n, e), t1(e, { attribution: "createAnalyticsClient", frameId: n, url: r }), { logEvent: e => { if (!e?.action || !e.category) { eI.warn("LogEvent | Missing event data"); return } tQ.sender(n).logEmbeddedEvent(e) }, logPageView: () => tZ(n) } }, createGuestAuthProvider: e => { let { backend: t } = e; return tB(t, "Invalid backend URL"), rA.create(t) }, getChatOptionsFromUrl: rd, openSidebar: rT, renderChat: (e, t) => { t = rm(t, rd(!1)); let r = t8(t?.webAppUrl, t?.backend); tR(r); let n = r(e0.frame.chat.pathname, { ...tC(t), [p.IS_EMBEDDED]: "1" }), a = tl(n, { container: e, key: t6(t.key), removeNonMatchingFrame: !!t.supportedModes?.length }); tk(t), tm(a, t), t.enableActivityLogging && !t.disableAnalytics && t0(a), t1(t, { attribution: "renderChat", frameId: a, url: n }); let o = rp.getOrCreateEventTarget(a); return { off: o.removeEventListener, on: o.addEventListener } }, renderComposer: (e, t) => { let r = t8(t?.webAppUrl, t?.backend); tR(r); let n = r(e0.frame.composer.pathname, { ...tC(t), [p.IS_EMBEDDED]: "1" }), a = tl(n, { container: e, key: t6(t.key) }); tm(a, t), t.enableActivityLogging && !t.disableAnalytics && t0(a), t1(t, { attribution: "renderComposer", frameId: a, url: n }) }, renderRecommendations: (e, t) => { let r = t8(t?.webAppUrl, t?.backend); tR(r); let n = r(e0.frame.recommendations.pathname, { ...ty(t), [p.IS_EMBEDDED]: "1" }), a = tl(n, { container: to({ container: e, id: "container-knR5Gk8lb", style: { height: 116, position: "relative", width: "100%" }, tagName: "div" }), key: t6(t.key), style: { left: 0, position: "absolute", top: 0 } }); tV(t), tm(a, t), t.enableActivityLogging && !t.disableAnalytics && t0(a), t1(t, { attribution: "renderRecommendations", frameId: a, url: n }) }, renderSearchBox: rg, renderSearchResults: (e, t) => { "" === t.datasource && (t.datasource = void 0); let r = t8(t?.webAppUrl, t?.backend); tR(r); let n = r(e0.frame.results.pathname, { ...tD(), ...ty(t), [p.IS_EMBEDDED]: "1", [p.RESULT_TAB_IDS]: t?.defaultResultTabs, [p.TAB]: t.datasource }), a = tl(n, { container: e, key: t6(t.key), removeNonMatchingFrame: !!t.supportedModes?.length }); tV(t), tm(a, t), t.enableActivityLogging && !t.disableAnalytics && t0(a), t1(t, { attribution: "renderSearchResults", frameId: a, url: n }) }, renderSidePanel: (e, t) => { let r = t8(t?.webAppUrl, t?.backend); tR(r); let n = r(e0.frame.sidePanel.pathname, { ...tC(t), [p.IS_EMBEDDED]: "1" }), a = tl(n, { container: e, key: t6(t.key) }), o = ta(a); if (t.onResize && o) { let { cleanup: e } = tz.get(a) || {}; e?.(); let r = new ResizeObserver(e => { for (let r of e) t.onResize?.(r.contentRect.height, r.contentRect.width) }); r.observe(o), tz.set(a, { cleanup: () => { r.unobserve(o) } }) } let i = { ...t, onDraftExport: t.widgetConfigs?.composer?.onDraftExport }; tm(a, i), t.enableActivityLogging && !t.disableAnalytics && t0(a), t1(i, { attribution: "renderSidePanel", frameId: a, url: n }) }, version: "fe-release-2024-12-17-3adb6f0" }; window.EmbeddedSearch = rN, window.GleanWebSDK = rN, window.dispatchEvent(new Event("glean:ready")) })() })();